% github, gh, common

$ gh_default_branch: gh repo view --json defaultBranchRef --jq .defaultBranchRef.name
$ gh_user: gh api user --jq .login --- --fzf-overrides '--no-select-1'
$ gh_latest_release: gh api 'repos/{owner}/{repo}/releases/latest' --jq '.tag_name'

% github, gh
@ github, gh, common

# Get default branch
gh repo view --json defaultBranchRef --jq .defaultBranchRef.name

# Create a PUBLIC repository based on the current directory
gh repo create <gh_user>/<git_reponame> --public --push --source=.

# Create a PRIVATE repository based on the current directory
gh repo create <gh_user>/<git_reponame> --private --push --source=.

# List all repositories for a user/org
gh api graphql --paginate -F owner=<owner> -f query='
  query($owner: String!, $endCursor: String) {
    repositoryOwner(login: $owner) {
      repositories(first: 100 ownerAffiliations: OWNER isFork: false orderBy: { field: NAME direction: ASC } after: $endCursor) { totalCount pageInfo { hasNextPage endCursor } nodes { nameWithOwner } } } }'

$ owner: basename "$( pwd )" --- --fzf-overrides '--no-select-1'

# Create a pull-request based on the current Jira issue (i.e., PROJ-1234 or PROJ_1234)
gh pr create --title '<issue>: <title>' --body '<body>'

$ issue: git rev-parse --abbrev-ref HEAD | grep -Eio '[a-z]+[_-][0-9]+' | tr '[a-z]_' '[A-Z]-' --- --fzf-overrides '--no-select-1'
$ title: jira view $issue --gjq 'fields.summary'; git log --format=%s <gh_default_branch>..HEAD; --- --fzf-overrides '--no-select-1'

# Open tig at the latest release
tig <gh_latest_release>

# Cherry pick the merge commit from a pull request
git cherry-pick <merge_commit> -m1

$ merge_commit: gh pr view <pull_request> --json mergeCommit --jq .mergeCommit.oid
$ pull_request: gh pr list --limit 100 --state merged | mlr --t2p --hi label id,summary,branch,state,date then cut -f id,summary,branch,date --- --headers 1 --column 1 --delimiter '\s+'

# Perform a quick pull request review
gh pr view && gh pr diff && read -q '?Approve? ' && gh approve

# Squash merge a pull request, using the PR's title and body
gh pr view --json body --jq .body | gh pr merge --body-file - --delete-branch --squash --subject "$( gh pr view --json title --jq .title )"

# Show commit history since the latest release
git log -p <gh_latest_release>..HEAD

% github, gh, api
@ github, gh, common

# List all tags for a repository
gh api 'repos/{owner}/{repo}/git/refs/tags'
